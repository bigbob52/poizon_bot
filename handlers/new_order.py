from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import re

from config import MANAGER_ID
from db.orders import create_order, update_order_status
from keyboards.menu import get_menu_for_user

from handlers.keyboards.new_order import *


router = Router()

class OrderFSM(StatesGroup):
    link = State()
    size = State()
    price = State()

async def show_current_order(message: Message, items: list):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞"""
    if items:
        await message.answer(
            f"<b>üì¶ –í–∞—à –∑–∞–∫–∞–∑:</b>\n\n" +
            "\n\n".join(
                [
                    f"<u>–ü–æ–∑–∏—Ü–∏—è ‚Ññ{i+1}</u>\n"
                    f"<b>–¢–æ–≤–∞—Ä:</b> {item['link']}\n"
                    f"<b>–†–∞–∑–º–µ—Ä:</b> {item['size']}\n"
                    f"<b>–¶–µ–Ω–∞:</b> {item['price']}¬•"
                    for i, item in enumerate(items)
                ]
            ) + "\n\n"
            f"<b>üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {sum(item['price'] for item in items)}¬•</b>",
            reply_markup=manage_order_kb
        )
    else:
        await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä", reply_markup=empty_order_kb)

async def save_item_field(state: FSMContext, field_name: str, value):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—è –∞–π—Ç–µ–º–∞"""
    data = await state.get_data()
    items = data.get("items", [])
    edit_index = data.get("edit_index")

    if edit_index is not None:
        # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
        items[edit_index][field_name] = value
        await state.update_data(items=items, edit_index=None)
        return items, True  # True ‚Äî –∑–Ω–∞—á–∏—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏
    else:
        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ –≤ –±—É–¥—É—â–∏–π —Ç–æ–≤–∞—Ä
        await state.update_data(**{field_name: value})
        return items, False  # False ‚Äî –∑–Ω–∞—á–∏—Ç –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä


# --- 1. –ù–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞ ---
@router.callback_query(F.data == "new_order")
async def new_order_handler(callback: CallbackQuery):
    await callback.message.answer(
        text=(
            "<b>‚ÑπÔ∏è –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π (FAQ).</b>\n\n"
            "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–æ—Ç–æ–º —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫—É—Ä—Å–∞ —é–∞–Ω—è –∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. "
            "–¢–æ—á–Ω—É—é —Å—É–º–º—É –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–∏—Ç –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
        ),
        reply_markup=approval_kb
    )
    await callback.answer()


# --- 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è ---
@router.callback_query(F.data == "get_item_link")
async def ask_item_link(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä: ", reply_markup=help_link_kb)
    await state.set_state(OrderFSM.link)
    await callback.answer()


# --- 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ ---
@router.message(StateFilter(OrderFSM.link))
async def ask_item_size(message: Message, state: FSMContext):

    url_regex = r'https?://[^\s]+'
    allowed_prefixes = (
        "https://dw4.co/t/A/",
        "https://fast.dewu.com/page/productDetail"
    )

    urls = re.search(url_regex, message.text.strip())
    if not urls:
        await message.answer(
            "‚ùå –í –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É —Å Poizon"
        )

    url = urls.group(0)
    if not any(url.startswith(prefix) for prefix in allowed_prefixes):
        await message.answer(
            "‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å —Å–∞–π—Ç–∞ Poizon\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –µ–µ",
            reply_markup=help_link_kb
        )
        return

    items, is_edited = await save_item_field(state, "link", url)

    if is_edited:
        await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        await show_current_order(message, items)
    else:

        await message.answer(
            text=(
                "‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n"
                "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞\n"
                "–ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç ‚Äî —Ä–∞–∑–º–µ—Ä–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ ¬´<code>‚Äî</code>¬ª"
            ),
            reply_markup=help_size_kb,
        )
        await state.set_state(OrderFSM.size)


# --- 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä ---
@router.message(StateFilter(OrderFSM.size))
async def ask_item_price(message: Message, state: FSMContext):
    # todo: –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–∂–µ —Ç–∏–ø–∞ isdigit() –∏–ª–∏ in (M, L, XL...)
    size = message.text.strip()
    items, is_edited = await save_item_field(state, "size", size)
    if is_edited:
        await message.answer("‚úÖ –†–∞–∑–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await show_current_order(message, items)
    else:
        await message.answer(
            text=(
                "‚úÖ –†–∞–∑–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n "
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö (CNY)."
            ),
            reply_markup=help_price_kb)
        await state.set_state(OrderFSM.price)


# --- 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É ---
@router.message(StateFilter(OrderFSM.price))
async def add_item_to_order(message: Message, state: FSMContext):
    price_text = message.text.strip()

    if not price_text.isdigit():
        await message.answer(
            "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!",
            reply_markup=help_price_kb
        )
        return

    price = int(price_text)
    items, is_edited = await save_item_field(state, "price", price)

    if is_edited:
        await message.answer("‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        await show_current_order(message, items)
    else:
        data = await state.get_data()
        link = data.get("link")
        size = data.get("size")

        items.append({"link": link, "size": size, "price": price})

        await state.update_data(items=items)
        await show_current_order(message, items)


# --- 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ ---
# -- ADD --
@router.callback_query(F.data == "order_add")
async def add_more(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑!\n\n"
                                  "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: ")
    await state.set_state(OrderFSM.link)
    await callback.answer()

# -- EDIT --
# –≤—ã–±–∏—Ä–∞–µ–º –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä —Ä–µ–¥–∞—á–∏—Ç—å
@router.callback_query(F.data == "order_edit")
async def edit_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    items = data.get("items", [])

    if not items:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await callback.answer()
        return

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=get_items_list_kb(items))
    await callback.answer()

# –≤—ã–±–∏—Ä–∞–µ–º —á—Ç–æ —Ä–µ–¥–∞—á–∏—Ç—å —É —Ç–æ–≤–∞—Ä–∞, –ª–∏–±–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ
@router.callback_query(F.data.startswith("edit_item_"))
async def edit_item(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.split("_")[-1])  # –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤—ã–±—Ä–∞–ª–∏
    await state.update_data(edit_index=index)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ state


    data = await state.get_data()
    item = data["items"][index]


    await callback.message.edit_text(
        f"–í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–∑–∏—Ü–∏—é ‚Ññ{index+1}:\n"
        f"–°—Å—ã–ª–∫–∞: {item['link']}\n"
        f"–†–∞–∑–º–µ—Ä: {item['size']}",
        reply_markup=edit_item_kb
    )
    await callback.answer()

# —Ä–µ–¥–∞—á–∏–º —Å—Å—ã–ª–∫—É
@router.callback_query(F.data == "edit_link")
async def edit_link(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä: ")
    await state.set_state(OrderFSM.link)
    await callback.answer()

# —Ä–µ–¥–∞—á–∏–º —Ä–∞–∑–º–µ—Ä
@router.callback_query(F.data == "edit_size")
async def edit_size(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: ")
    await state.set_state(OrderFSM.size)
    await callback.answer()

# —Ä–µ–¥–∞—á–∏–º —Ä–∞–∑–º–µ—Ä
@router.callback_query(F.data == "edit_price")
async def edit_size(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞: ")
    await state.set_state(OrderFSM.price)
    await callback.answer()

# —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
@router.callback_query(F.data == "delete_item")
async def delete_item(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    index = data.get("edit_index")
    items = data.get("items", [])

    if index is not None and 0 <= index < len(items):
        removed = items.pop(index)
        await state.update_data(items=items, edit_index=None)
        await callback.message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∑–∞–∫–∞–∑–∞")
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")

    # –≤—ã–≤–æ–¥–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    await show_current_order(callback.message, items)
    await callback.answer()

# –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∑–∞–∫–∞–∑
@router.callback_query(F.data == "cancel_editing")
async def cancel_editing(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    items = data.get("items", [])

    await show_current_order(callback.message, items)
    await callback.answer()

# -- SUBMIT --
# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–¥
@router.callback_query(F.data == "order_submit")
async def submit_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    items = data.get("items", [])
    user = callback.from_user

    if not items:
        await callback.message.answer(f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã")
        await callback.answer()
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–¥
    order_id = create_order(user.id, items)

    # —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    order_text = (
        f"<b> –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}!</b>\n"
        f"üìä –°—Ç–∞—Ç—É—Å: new\n\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: @{user.username or user.full_name}\n"
        f"üÜî Telegram ID: <code>{user.id}</code>\n\n"
        f"üí∞–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {sum(item['price'] for item in items)}¬•\n\n"
        + "\n\n".join(
            [f"–¢–æ–≤–∞—Ä ‚Ññ{i+1}.\n"
             f"üîó –°—Å—ã–ª–∫–∞: {item['link']}\n"
             f"üìè –†–∞–∑–º–µ—Ä: {item['size']}\n"
             f"üè∑Ô∏è –¶–µ–Ω–∞: {item['price']}¬•"
             for i, item in enumerate(items)]
        )
    )

    await callback.bot.send_message(
        chat_id=MANAGER_ID,
        text=order_text,
        disable_web_page_preview=True,
        reply_markup=get_manager_approval_kb(order_id)
    )

    await callback.message.edit_text(
        text=(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç!\n\n"
            f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ.\n\n"
            f"<i>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!</i> ü©µ"
        ),
        reply_markup= None
    )
    await state.clear()

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–π–Ω –º–µ–Ω—é
    await callback.message.answer(
        "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_menu_for_user(user.id)
    )
    await callback.answer()


# -- FOR MANAGERS --
@router.callback_query(F.data.startswith("manager_order_accept_"))
async def manager_order_accept(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[-1])
    update_order_status(order_id, "accepted")
    new_text = callback.message.text.replace("–°—Ç–∞—Ç—É—Å: new", "–°—Ç–∞—Ç—É—Å: accepted")

    await callback.message.edit_reply_markup(None)  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await callback.message.edit_text(
        text=new_text,
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback.answer("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç ‚úÖ")

@router.callback_query(F.data.startswith("manager_order_canceled_"))
async def manager_order_cancel(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[-1])
    update_order_status(order_id, "canceled")
    new_text = callback.message.text.replace("–°—Ç–∞—Ç—É—Å: new", "–°—Ç–∞—Ç—É—Å: canceled")

    await callback.message.edit_reply_markup(None)  # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await callback.message.edit_text(
        text=new_text,
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω ‚ùå")