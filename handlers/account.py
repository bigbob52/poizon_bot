from aiogram import Router, F
from aiogram.types import CallbackQuery

from db.users import get_user_by_id
from db.orders import get_user_orders, get_order
from .common import send_main_menu
from .keyboards.account import account_kb, back_to_account_kb, get_user_orders_list_kb


router = Router()


async def render_account(callback: CallbackQuery):
    user = get_user_by_id(callback.from_user.id)

    if user:
        text = (
            f"<b>üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
            f"üÜî –í–∞—à ID: <code>{user['user_id']}</code>\n\n"
            f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {user['orders']}\n"
            f"üéÅ –í—Å–µ–≥–æ –±–æ–Ω—É—Å–æ–≤: {user['bonus']} BYN"
        )

        if user['username'] is None:
            text += (
                "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ! –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π —Ç–µ–≥ (@username)!</b>\n"
                "–í —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ —Å–º–æ–∂–µ—Ç —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram, –ª–∏–±–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ."
            )

        await callback.message.edit_text(
            text=text,
            reply_markup=account_kb
        )
        await callback.answer()

    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç :(")



@router.callback_query(F.data == "account")
async def account_handler(callback: CallbackQuery):
    await render_account(callback)


@router.callback_query(F.data == "check_user_orders")
async def check_user_orders(callback: CallbackQuery):
    user_id = callback.from_user.id
    orders = get_user_orders(user_id)

    if not orders:
        await callback.message.edit_text(
            text="üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=back_to_account_kb
        )
        await callback.answer()
        return

    await callback.message.edit_text(
        text="üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:",
        reply_markup=get_user_orders_list_kb(orders)
    )
    await callback.answer()

# –ø–∞–≥–∏–Ω–∞—Ü–∏—è
@router.callback_query(F.data.startswith("user_orders_page:"))
async def paginate_orders(callback: CallbackQuery):
    user_id = callback.from_user.id
    orders = get_user_orders(user_id)
    page = int(callback.data.split(":")[-1])

    await callback.message.edit_reply_markup(
        reply_markup=get_user_orders_list_kb(orders, page=page)
    )
    await callback.answer()

# --- –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑ ---
@router.callback_query(F.data.startswith("user_order_detail:"))
async def show_user_order_detail(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    order_info, order_items = get_order(order_id)

    if not order_info or order_info["user_id"] != callback.from_user.id:
        await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    text = (
        f"<b>–ó–∞–∫–∞–∑ #{order_info['order_id']}</b>\n"
        # f"üìä –°—Ç–∞—Ç—É—Å: {order_info['status']}\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {sum(item['price'] for item in order_items)}¬•\n"
        f"üóìÔ∏è –°–æ–∑–¥–∞–Ω: {order_info['created_at']} UTC\n\n" +
        "\n\n".join(
            [f"<u>–ü–æ–∑–∏—Ü–∏—è ‚Ññ{i+1}</u>\n"
             f"üîó –°—Å—ã–ª–∫–∞: {item['link']}\n"
             f"üìè –†–∞–∑–º–µ—Ä: {item['size']}\n"
             f"üè∑Ô∏è –¶–µ–Ω–∞: {item['price']}¬•"
             for i, item in enumerate(order_items)]
        )
    )

    await callback.message.edit_text(text, reply_markup=back_to_account_kb)
    await callback.answer()



@router.callback_query(F.data == "back_to_account")
async def back_to_account(callback: CallbackQuery):
    await render_account(callback)


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    await send_main_menu(callback.from_user.id, callback)