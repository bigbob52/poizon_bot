from aiogram import types, Router, F
from aiogram.filters import Command

from .common import send_main_menu
from db.users import add_user, get_user_by_id
from config import ADMIN_IDS, ADMIN_ALERT_NEW_USER
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("start"))
async def start_cmd(message: types.Message):
    user_id = message.from_user.id

    user = get_user_by_id(user_id)

    if not user:
        # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–¥
        username = message.from_user.username or None
        add_user(user_id, username)

        # –µ—Å–ª–∏ –Ω–∞–¥–æ, —à–ª–µ–º —É–≤–µ–¥ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–º —é–∑–µ—Ä–µ
        text = (
            f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n"
            f"ID: <code>{user_id}</code>\n"
            f"Username: @{message.from_user.username or '‚Äî'}\n"
            f"–ò–º—è: {message.from_user.full_name}"
        )

        if ADMIN_ALERT_NEW_USER:
            for admin_id in ADMIN_IDS:
                try:
                    await message.bot.send_message(admin_id, text)
                except Exception as e:
                    logger.warning(f"–£–≤–µ–¥ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —é–∑–µ—Ä–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –∞–¥–º–∏–Ω—É #{admin_id}. {e}")


    await send_main_menu(user_id, message)

@router.callback_query(F.data == "main_menu")
async def main_menu_cb(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await send_main_menu(user_id, callback)
    await callback.answer()
