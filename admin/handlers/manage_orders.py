from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message

from admin.handlers.keyboards.manage_orders import *
from db.orders import update_order_status, delete_order, get_all_actual_orders
from .common import render_order


router = Router()

@router.callback_query(F.data == "manage_orders")
async def manage_orders(callback: CallbackQuery):
    await callback.message.edit_text("–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Å –æ—Ä–¥–µ—Ä–∞–º–∏ –¥–µ–ª–∞–µ–º?", reply_markup=orders_kb)



async def show_all_orders(target):
    orders = get_all_actual_orders()
    if not orders:
        await target.message.edit_text("‚ùå –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        return

    await target.message.edit_text(
        "üìã –í—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã:",
        reply_markup=get_orders_list_kb(orders, page=1)
    )


# --- –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –ø–æ id ---
class OrderSearch(StatesGroup):
    order_id = State()

@router.callback_query(F.data == "get_oder_by_id")
async def ask_oder_id(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:")
    await state.set_state(OrderSearch.order_id)
    await callback.answer()

@router.message(OrderSearch.order_id)
async def get_order_by_id(message: Message, state: FSMContext):
    order_id = int(message.text.strip())
    await render_order(order_id, message)
    await state.clear()

@router.callback_query(F.data.startswith("ask_order_status:"))
async def ask_order_status(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[-1])
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–ø–∏—Å–∫–∞: ",
        reply_markup=get_order_status_kb(order_id)
    )

@router.callback_query(F.data.startswith("set_order_status:"))
async def set_order_status(callback: CallbackQuery):
    _, order_id, status = callback.data.split(":")
    order_id = int(order_id)

    update_order_status(order_id, status)

    await callback.message.edit_text(
        f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {status}",
        reply_markup=get_edit_order_kb(order_id)
    )

@router.callback_query(F.data.startswith("ask_delete_order:"))
async def ask_delete_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ #{order_id}? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        reply_markup=get_delete_confirm_kb(order_id)
    )

@router.callback_query(F.data.startswith("confirm_delete_order:"))
async def confirm_delete_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    delete_order(order_id)
    await callback.message.answer(f"üóëÔ∏è –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    await show_all_orders(callback)


@router.callback_query(F.data.startswith("cancel_delete_order:"))
async def cancel_delete_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    # await callback.message.edit_text(
    #     f"–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ #{order_id}",
    #     reply_markup=get_edit_order_kb(order_id)
    # )
    await render_order(order_id, callback, get_edit_order_kb(order_id))


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (new, accepted) ---
@router.callback_query(F.data == "get_all_orders")
async def get_all_orders(callback: CallbackQuery):
    await show_all_orders(callback)

# –ø–∞–≥–∏–Ω–∞—Ü–∏—è
@router.callback_query(F.data.startswith("orders_page:"))
async def paginate_orders(callback: CallbackQuery):
    page = int(callback.data.split(":")[-1])
    orders = get_all_actual_orders()
    await callback.message.edit_reply_markup(
        reply_markup=get_orders_list_kb(orders, page=page)
    )

@router.callback_query(F.data.startswith("order_detail:"))
async def show_order(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[-1])
    await render_order(order_id, callback, get_edit_order_kb(order_id))