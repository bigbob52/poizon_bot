from aiogram import F, Router
from aiogram.types import CallbackQuery
from datetime import datetime, timedelta, timezone

from .keyboards.statistics import stats_kb, back_to_stats_kb
from db.users import count_all_users, count_users_for_period
from db.orders import count_all_orders, count_orders_for_period

router = Router()


async def show_general_stats(callback: CallbackQuery):
    users_count = count_all_users()
    orders_count = count_all_orders()

    text = (
        f"<b>üìä –û–±—â–∞—è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {users_count}\n"
        f"üì¶ <b>–ó–∞–∫–∞–∑–æ–≤:</b> {orders_count}"
    )

    await callback.message.edit_text(text=text, reply_markup=stats_kb)
    await callback.answer()


@router.callback_query(F.data == "stats")
async def statistics(callback: CallbackQuery):
    await show_general_stats(callback)

@router.callback_query(F.data.startswith("stats_for:"))
async def stats_for_period(callback: CallbackQuery):
    period = callback.data.split(":")[-1]

    now = datetime.now(timezone.utc)
    match period:
        case "1h":
            start_time = now - timedelta(hours=1)
            label = "–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"
        case "12h":
            start_time = now - timedelta(hours=12)
            label = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤"
        case "24h":
            start_time = now - timedelta(hours=24)
            label = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"
        case "week":
            start_time = now - timedelta(days=7)
            label = "–ù–µ–¥–µ–ª—è"
        case "month":
            start_time = now - timedelta(days=30)
            label = "–ú–µ—Å—è—Ü"

    users_count = count_users_for_period(start_time)
    orders_count = count_orders_for_period(start_time)

    text = (
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: {label}</b>\n\n"
        f"üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
        f"üì¶ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {orders_count}"
    )

    await callback.message.edit_text(text=text, reply_markup=back_to_stats_kb)
    await callback.answer()

@router.callback_query(F.data == "back_to_stats")
async def back_to_stats(callback: CallbackQuery):
    await show_general_stats(callback)
    await callback.answer()